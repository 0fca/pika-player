@model Claudia.Models.ManageViewModels.EditUserModel
@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole> RoleManager

@{
    ViewData["Title"] = "Edit data of user " + Model.Email;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="d-flex align-items-center text-center align-content-center flex-wrap row row-margins">
    <h1>Edit @Model.Email info</h1>
    <div class="col-md-4 col-centered">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Id" class="control-label"></label>
                <input asp-for="Id" class="form-control" />
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UserName" class="control-label"></label>
                <input asp-for="UserName" class="form-control" />
                <span asp-validation-for="UserName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Roles" class="control-label"></label>
                <ul class="list-unstyled" id="roleList">
                    @foreach (var role in Model.Roles) {
                        <li><a class="fas fa-trash-alt" asp-controller="manage" asp-action="removefromrole" asp-route-id="@Model.Id" asp-route-roleName="@role"> @role</a></li>
                    }
                </ul>
                <select asp-for="Roles" id="roleSelect" class="form-control" multiple>
                    @{ 
                        var roles = RoleManager.Roles;
                        foreach (var role in roles) {
                            if (!(await UserManager.GetRolesAsync(await UserManager.FindByIdAsync(Model.Id))).Contains(role.Name)) { 
                                <option value="@role.Name">@role.Name</option>
                            }
                        }
                    }
                </select>
                <span asp-validation-for="Roles" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-danger" asp-action="edituserconfirmation" />
                <input type="submit" value="Cancel" class="btn btn-default" formmethod="get" asp-action="adminpanel" />
            </div>
        </form>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const elems = document.querySelectorAll('select');
        const instances = M.FormSelect.init(elems);
    });
</script>

